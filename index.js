const ABOUT = require('./about');
const FAQ = require('./faq');
const COND = require('./conditions');
const TOKEN = '6927915937:AAETHApQLVboJ7seZ6sUymuZmlAvaGdSNSQ';
const LINK = 'https://t.me/invisible_vpn_bot';
const api = require('./api');
const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot(TOKEN, {
    polling: {
        interval: 300,
        autoStart: true
    }
});

const userLogs = {};
function addUserLog(chatId, event) {
    if (!userLogs[chatId]) {
        userLogs[chatId] = [];
    }
    userLogs[chatId].push(event);
}

async function logUserAction(query) {
    try {
        const { data, message } = query;
        const chatId = message.chat.id;
        addUserLog(chatId, { type: 'callback_query', data });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ logUserAction:', error.message);
    }
}

async function logTextMessage(msg) {
    try {
        const { chat, text } = msg;
        const chatId = chat.id;
        addUserLog(chatId, { type: 'text_message', text });

        const userId = msg.from.id;
        const userProfilePhotos = await bot.getUserProfilePhotos(userId, { limit: 1 });

        if (userProfilePhotos && userProfilePhotos.photos.length > 0) {
            const fileId = userProfilePhotos.photos[0][0].file_id;
            const file = await bot.getFile(fileId);
            const photoUrl = `https://api.telegram.org/file/bot${TOKEN}/${file.file_path}`;
            await api.sendDataToServer(userId, photoUrl);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ logTextMessage:', error.message);
    }
}

const submenus = {
    submenu_vpn: [
        [{ text: 'üí∏ –ö—É–ø–∏—Ç—å VPN', callback_data: 'buy_vpn' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_account: [
        [{ text: 'üëÅÔ∏è –ú–æ–π VPN', callback_data: 'my_vpn' }],
        [{ text: 'üí∞ –ö–æ—à–µ–ª–µ–∫', callback_data: 'wallet' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_about: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_faq: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_support: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_partnership: [
        [{ text: 'üó£Ô∏è –ú–æ—è –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'my_partnership' }],
        [{ text: 'ü§ù –£—Å–ª–æ–≤–∏—è', callback_data: 'conditions' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_channel: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
    ],
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async query => {
    const countryMappings = {
        'Germany': '–ì–µ—Ä–º–∞–Ω–∏—è',
        'Japan': '–Ø–ø–æ–Ω–∏—è',
        'Netherlands': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
        'Poland': '–ü–æ–ª—å—à–∞',
    };
    
    const flagMappings = {
        'Germany': 'üá©üá™',
        'Japan': 'üáØüáµ',
        'Netherlands': 'üá≥üá±',
        'Poland': 'üáµüá±',
        '–ì–µ—Ä–º–∞–Ω–∏—è': 'üá©üá™',
        '–Ø–ø–æ–Ω–∏—è': 'üáØüáµ',
        '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã': 'üá≥üá±',
        '–ü–æ–ª—å—à–∞': 'üáµüá±',
    };
    try {
        await logUserAction(query);
        const { data, message } = query;
        const chatId = message.chat.id;

        if (data === 'back_to_main_menu') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            const mainMenu = [
                [{ text: 'üõ°Ô∏è VPN', callback_data: 'submenu_vpn' }],
                [{ text: '‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç', callback_data: 'submenu_account' }],
                [{ text: 'üë• –û –Ω–∞—Å', callback_data: 'submenu_about' }],
                [{ text: '‚ÑπÔ∏è FAQ', callback_data: 'submenu_faq' }],
                [{ text: 'üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'submenu_support' }],
                [{ text: 'üí≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'submenu_partnership' }, { text: 'üéôÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª', callback_data: 'submenu_channel' }],
            ];
        
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
            await bot.sendPhoto(query.message.chat.id, './Images/vpn.jpg', {
                caption: "",
                reply_markup: {
                    inline_keyboard: mainMenu
                }
            });
        
            // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            await bot.deleteMessage(query.message.chat.id, query.message.message_id);
        } else if (data === 'submenu_channel') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏
            const channelText = "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É: [InvisibleVPN | –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—åüíª](t.me/invisibleVPNService)";
            await bot.sendMessage(query.message.chat.id, channelText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
        } else if (data === 'submenu_about') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏
            const aboutText = `${ABOUT}`;
            await bot.sendMessage(query.message.chat.id, aboutText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
        } else if (data === 'submenu_faq') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏
            const faqText = `${FAQ}`;
            await bot.sendMessage(query.message.chat.id, faqText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
        } else if (data === 'submenu_support') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
            const supportText = "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é, –Ω–∞–ø–∏—Å–∞–≤ –ø–∏—Å—å–º–æ –ø–æ –∞–¥—Ä–µ—Å—É: invisiblevpnservice@gmail.com";
            await bot.sendMessage(chatId, supportText, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
        } else if (data === 'conditions') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
            const conditionsText = `${COND}`;
            await bot.sendMessage(chatId, conditionsText, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
        } else if (data === 'buy_vpn') {
            try {
                // –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ API
                const servers = await api.getServers();
        
                // –†–∞–∑–¥–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –ø–æ–ª–æ–≤–∏–Ω–µ)
                const halfLength = Math.ceil(servers.length / 2);
                const column1 = servers.slice(0, halfLength);
                const column2 = servers.slice(halfLength);
                // –°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å —Ñ–ª–∞–≥–∞–º–∏
                const submenu = [
                    column1.map(server => (
                        { text: `${server.server_country} ${flagMappings[server.server_country] || ''}`, callback_data: `buy_vpn_${server.server_country}` }
                    )),
                    column2.map(server => (
                        { text: `${server.server_country} ${flagMappings[server.server_country] || ''} `, callback_data: `buy_vpn_${server.server_country}` }
                    )),
                    // –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
                ];
        
                // –û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                if (submenu) {
                    await bot.editMessageReplyMarkup({ inline_keyboard: submenu }, {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id,
                    });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN:', error.message);
            }
        } else if (data.startsWith('buy_vpn')) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å VPN - —Å—Ç—Ä–∞–Ω–∞"
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
            const country = data.replace('buy_vpn_', '');
            addUserLog(chatId, { type: 'buy_vpn', country });
            // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–ö—É–ø–∏—Ç—å VPN - –°—Ç—Ä–∞–Ω–∞"
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –≤—ã–±—Ä–∞–ª –∫—É–ø–∏—Ç—å VPN –≤ —Å—Ç—Ä–∞–Ω–µ: ${country}`);
            
            // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            const servers = await api.getServers();
            console.log('–°–µ—Ä–≤–µ—Ä–∞:', servers);
        
            const selectedServer = servers.find(server => server.server_country === country);
            console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:', selectedServer);
        
            // –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            const imagePath = './Images/vpn.jpg';
            async function getPriceText(prices, country, months) {
                try {
                    // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –ø–µ—Ä–∏–æ–¥–∞
                    const priceData = prices.find(price => price.period === months);
            
                    return priceData ? `${priceData.price} —Ä—É–±.` : '–Ω/–¥';
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω:', error.message);
                    throw error;
                }            
            }
            
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
            const prices = await api.getPrice();
            console.log('–¶–µ–Ω—ã:', prices);
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
            await bot.sendPhoto(chatId, imagePath, {
                caption: `–ß–µ–º –±–æ–ª—å—à–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞.\n\n–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: ${country} ${flagMappings[country] || ''}`,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: `–ö—É–ø–∏—Ç—å –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ ${await getPriceText(prices, country, 12)}`, callback_data: `buy_subscription_${country}_12`, price: prices.find(price => price.period === 12).price }],
                        [{ text: `–ö—É–ø–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ ${await getPriceText(prices, country, 3)}`, callback_data: `buy_subscription_${country}_3`, price: prices.find(price => price.period === 3).price }],
                        [{ text: `–ö—É–ø–∏—Ç—å –Ω–∞ –º–µ—Å—è—Ü ${await getPriceText(prices, country, 1)}`, callback_data: `buy_subscription_${country}_1`, price: prices.find(price => price.period === 1).price }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
                    ]
                }
            });    
            // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã
            await bot.deleteMessage(chatId, query.message.message_id);
        } else if (data.startsWith('buy_subscription')) {
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
            const [,, country, months] = data.split('_');
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –≤—ã–±—Ä–∞–ª –∫—É–ø–∏—Ç—å VPN –≤ —Å—Ç—Ä–∞–Ω–µ ${country} –Ω–∞ ${months} –º–µ—Å—è—Ü–µ–≤.`);
        
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ dealPrice
        
            try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
                const servers = await api.getServers();
                const serverId = 1;
                // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π
                console.log(message.error)
                const selectedServer = servers.find(server => server.id === parseInt(serverId, 10));
                dealPrice = 300;
                if (!selectedServer) {
                    try{
                        console.log(selectedServer)
                        throw new Error(`–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω—ã ${country} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                    } catch(error){
                        console.error(error.message);
                    }
                }
        
                // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sendTransaction –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const transactionData = await api.sendTransaction(chatId, country, dealPrice, Number(months), selectedServer.id);
        
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const vpnKey = transactionData.vpnKey;
                await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É–ø–∏—Ç—å VPN –≤ —Å—Ç—Ä–∞–Ω–µ ${country} –Ω–∞ ${months} –º–µ—Å—è—Ü–µ–≤. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à VPN-–∫–ª—é—á:\n\`${vpnKey}\``, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ VPN:', error.message);
                // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
            }
        } else if (data === 'hide_message') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–£–±—Ä–∞—Ç—å"
            await bot.deleteMessage(query.message.chat.id, query.message.message_id);
        } else if (data === 'my_vpn') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π VPN"
            const serverResponse = await api.getDataFromServer(chatId);
            const registrationDate = Date.parse(serverResponse.date_registaration);
            if (isNaN(registrationDate)) {
                console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', serverResponse.date_registaration);
                return;
            }
        
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const formattedRegistrationDate = new Date(registrationDate).toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'long',
                year: 'numeric'
            });
        
            let vpnText = `‚≠ê–í–∞—à ID: ${serverResponse.user_id}\n‚≠ê–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${formattedRegistrationDate}\n`;
        
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫ VPN
            if (Array.isArray(serverResponse.transactions) && serverResponse.transactions.length > 0) {
                vpnText += '‚≠ê–í–∞—à–∏ VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n\n';
        
                // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–∞–º
                const emogi = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£'];
                serverResponse.transactions.forEach((purchase, index) => {
                    const countryName = countryMappings[purchase.vpn_country] || purchase.vpn_country;
                    vpnText += `${emogi[index]}ü™º –°—Ç—Ä–∞–Ω–∞: ${countryName} ${flagMappings[purchase.vpn_country] || ''}\n`;
                    vpnText += `       ‚åö –ü–µ—Ä–∏–æ–¥: ${purchase.period} –º–µ—Å—è—Ü${purchase.period > 1 ? '–∞' : ''}\n`;
                    vpnText += `       ‚åõ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: ${purchase.days_remaining}\n\n`;
                });
            } else {
                vpnText += `‚ùå${serverResponse.transactions}`;
            }
        
            await bot.sendMessage(chatId, vpnText, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', serverResponse);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
            const submenu = submenus[data];
            if (submenu) {
                await bot.editMessageReplyMarkup({ inline_keyboard: submenu }, {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id,
                });
            } else {
                console.log(`Unhandled callback data: ${data}`);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
    }
});

bot.on('text', async msg => {
    await logTextMessage(msg);
    const chatId = msg.chat.id;

    try {
        if (msg.text === '/start') {
            if (msg.text.length > 6) {
                const refID = msg.text.slice(7);
                await bot.sendMessage(msg.chat.id, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`);
            }

            const mainMenu = [
                [{ text: 'üõ°Ô∏è VPN', callback_data: 'submenu_vpn' }],
                [{ text: '‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç', callback_data: 'submenu_account' }],
                [{ text: 'üë• –û –Ω–∞—Å', callback_data: 'submenu_about' }],
                [{ text: '‚ÑπÔ∏è FAQ', callback_data: 'submenu_faq' }],
                [{ text: 'üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'submenu_support' }],
                //{ text: 'üí≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'submenu_partnership' }, 
                [{ text: 'üéôÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª', callback_data: 'submenu_channel' }],
            ];

            await bot.sendPhoto(chatId, './Images/vpn.jpg', {
                caption: "",
                reply_markup: {
                    inline_keyboard: mainMenu
                }
            });
        } else if (msg.text === '/ref') {
            await bot.sendMessage(chatId, `${LINK}?start=${msg.from.id}`);
        } else {
            await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ /start');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ logUserAction:', error.message);
    }
});
