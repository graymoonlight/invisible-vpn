const TOKEN = '6927915937:AAExzAajoAxCbUjLr1ArfhTL9NCJQSveZJs'
const LINK = 'https://t.me/invisible_vpn_bot'

const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot(TOKEN, {
    polling: {
        interval: 300,
        autoStart: true
    }
});

const commands = [
    {
        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    },
    {
        command: "ref",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
    },
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.setMyCommands(commands);

bot.on("polling_error", err => console.log(err.data.error.message));

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é
const submenus = {
    submenu_vpn: [
        [{ text: '–û–ø—Ü–∏—è 1', callback_data: 'vpn_option_1' }],
        [{ text: '–û–ø—Ü–∏—è 2', callback_data: 'vpn_option_2' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_account: [
        [{ text: '–û–ø—Ü–∏—è 1', callback_data: 'account_option_1' }],
        [{ text: '–û–ø—Ü–∏—è 2', callback_data: 'account_option_2' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_about: [
        [{ text: '–û–ø—Ü–∏—è 1', callback_data: 'about_option_1' }],
        [{ text: '–û–ø—Ü–∏—è 2', callback_data: 'about_option_2' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_faq: [
        [{ text: '–û–ø—Ü–∏—è 1', callback_data: 'faq_option_1' }],
        [{ text: '–û–ø—Ü–∏—è 2', callback_data: 'faq_option_2' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_support: [
        [{ text: '–û–ø—Ü–∏—è 1', callback_data: 'support_option_1' }],
        [{ text: '–û–ø—Ü–∏—è 2', callback_data: 'support_option_2' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_partnership: [
        [{ text: '–û–ø—Ü–∏—è 1', callback_data: 'partnership_option_1' }],
        [{ text: '–û–ø—Ü–∏—è –¢–µ—Å—Ç', callback_data: 'partnership_option_2' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_channel: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
    ],
};

bot.on('text', async msg => {
    try {
        const mainMenu = [
            [{ text: 'üõ°Ô∏è VPN', callback_data: 'submenu_vpn' }],
            [{ text: '‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç', callback_data: 'submenu_account' }],
            [{ text: 'üë• –û –Ω–∞—Å', callback_data: 'submenu_about' }],
            [{ text: '‚ÑπÔ∏è FAQ', callback_data: 'submenu_faq' }],
            [{ text: 'üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'submenu_support' }],
            [{ text: 'üí≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'submenu_partnership' }, { text: 'üéôÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª', callback_data: 'submenu_channel' }],
        ];

        if (msg.text === '/start') {
            if (msg.text.length > 6) {
                const refID = msg.text.slice(7);
                await bot.sendMessage(msg.chat.id, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`);
            }
            await bot.sendPhoto(msg.chat.id, './Images/vpn.jpg', {
                caption: "",
                reply_markup: {
                    inline_keyboard: mainMenu
                }
            });
        } else if (msg.text === '/ref') {
            await bot.sendMessage(msg.chat.id, `${LINK}?start=${msg.from.id}`);
        } else {
            await bot.sendMessage(msg.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ /start');
        }
    } catch (error) {
        console.log(error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async query => {
    try {
        const { data } = query;

        if (data === 'back_to_main_menu') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            const mainMenu = [
                [{ text: 'üõ°Ô∏è VPN', callback_data: 'submenu_vpn' }],
                [{ text: '‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç', callback_data: 'submenu_account' }],
                [{ text: 'üë• –û –Ω–∞—Å', callback_data: 'submenu_about' }],
                [{ text: '‚ÑπÔ∏è FAQ', callback_data: 'submenu_faq' }],
                [{ text: 'üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'submenu_support' }],
                [{ text: 'üí≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'submenu_partnership' }, { text: 'üéôÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª', callback_data: 'submenu_channel' }],
            ];

            await bot.editMessageReplyMarkup({ inline_keyboard: mainMenu }, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
            });
        } else if (data === 'submenu_channel') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏
            const channelText = "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É: [InvisibleVPN | –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—åüíª](t.me/invisibleVPNService)";
            await bot.sendMessage(query.message.chat.id, channelText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
        } else if (data === 'hide_message') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–£–±—Ä–∞—Ç—å"
            await bot.deleteMessage(query.message.chat.id, query.message.message_id);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
            const submenu = submenus[data];
            if (submenu) {
                await bot.editMessageReplyMarkup({ inline_keyboard: submenu }, {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id,
                });
            }  else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
                switch (data) {
                    case 'vpn_option_1':
                        break;
                    case 'vpn_option_2':
                        break;
                    case 'account_option_1':
                        break;
                    case 'account_option_2':
                        break;
                    case 'about_option_1':
                        break;
                    case 'about_option_2':
                        break;
                    case 'faq_option_1':
                        break;
                    case 'faq_option_2':
                        break;
                    case 'support_option_1':
                        break;
                    case 'support_option_2':
                        break;
                    case 'partnership_option_1':
                        break;
                    case 'partnership_option_2':
                        break;
                    default:
                        console.log(`Unhandled callback data: ${data}`);
                }
            }
        }
    } catch (error) {
        console.log(error);
    }
});



