const TOKEN = '6927915937:AAExzAajoAxCbUjLr1ArfhTL9NCJQSveZJs';
const LINK = 'https://t.me/invisible_vpn_bot';

const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot(TOKEN, {
    polling: {
        interval: 300,
        autoStart: true
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
const userLogs = {};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function addUserLog(chatId, event) {
    if (!userLogs[chatId]) {
        userLogs[chatId] = [];
    }
    userLogs[chatId].push(event);
}

async function logUserAction(query) {
    try {
        const { data, message } = query;
        const chatId = message.chat.id;
        addUserLog(chatId, { type: 'callback_query', data });
    } catch (error) {
        console.log(error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async query => {
    await logUserAction(query);
});

async function logTextMessage(msg) {
    try {
        const { chat, text } = msg;
        const chatId = chat.id;
        addUserLog(chatId, { type: 'text_message', text });
    } catch (error) {
        console.log(error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async msg => {
    await logTextMessage(msg);
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å VPN"
const submenu_buy_vpn = [
    [{ text: 'üáØüáµ –Ø–ø–æ–Ω–∏—è', callback_data: 'buy_vpn_japan' }],
    [{ text: 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è', callback_data: 'buy_vpn_germany' }],
    [{ text: 'üá∫üá∏ –°–®–ê', callback_data: 'buy_vpn_usa' }],
    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–º–µ–Ω—é –≤ –æ–±—ä–µ–∫—Ç submenus
const submenus = {
    submenu_vpn: [
        [{ text: 'üí∏ –ö—É–ø–∏—Ç—å VPN', callback_data: 'buy_vpn' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_account: [
        [{ text: 'üëÅÔ∏è –ú–æ–π VPN', callback_data: 'my_vpn' }],
        [{ text: 'üí∞ –ö–æ—à–µ–ª–µ–∫', callback_data: 'wallet' }],
        [{ text: '% –°–∫–∏–¥–∫–∏', callback_data: 'discount' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_about: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_faq: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_support: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_partnership: [
        [{ text: 'üó£Ô∏è –ú–æ—è –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'my_partnership' }],
        [{ text: 'ü§ù –£—Å–ª–æ–≤–∏—è', callback_data: 'conditions' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }],
    ],
    submenu_channel: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
    ],
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async query => {
    try {
        const { data, message } = query;
        const chatId = message.chat.id;

        if (data === 'back_to_main_menu') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            const mainMenu = [
                [{ text: 'üõ°Ô∏è VPN', callback_data: 'submenu_vpn' }],
                [{ text: '‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç', callback_data: 'submenu_account' }],
                [{ text: 'üë• –û –Ω–∞—Å', callback_data: 'submenu_about' }],
                [{ text: '‚ÑπÔ∏è FAQ', callback_data: 'submenu_faq' }],
                [{ text: 'üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'submenu_support' }],
                [{ text: 'üí≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'submenu_partnership' }, { text: 'üéôÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª', callback_data: 'submenu_channel' }],
            ];

            await bot.editMessageReplyMarkup({ inline_keyboard: mainMenu }, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id,
            });
        } else if (data === 'submenu_channel') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏
            const channelText = "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É: [InvisibleVPN | –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—åüíª](t.me/invisibleVPNService)";
            await bot.sendMessage(query.message.chat.id, channelText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'hide_message' }]
                    ]
                }
            });
        } else if (data === 'buy_vpn') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å VPN"
            const submenu = submenu_buy_vpn;
            if (submenu) {
                await bot.editMessageReplyMarkup({ inline_keyboard: submenu }, {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id,
                });
            }
        } else if (data.startsWith('buy_vpn')) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å VPN - —Å—Ç—Ä–∞–Ω–∞"
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
            const country = data.replace('buy_vpn_', '');
            addUserLog(chatId, { type: 'buy_vpn', country });
            // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–ö—É–ø–∏—Ç—å VPN - –°—Ç—Ä–∞–Ω–∞"
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –≤—ã–±—Ä–∞–ª –∫—É–ø–∏—Ç—å VPN –≤ —Å—Ç—Ä–∞–Ω–µ: ${country}`);
        } else if (data === 'hide_message') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ "–£–±—Ä–∞—Ç—å"
            await bot.deleteMessage(query.message.chat.id, query.message.message_id);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
            const submenu = submenus[data];
            if (submenu) {
                await bot.editMessageReplyMarkup({ inline_keyboard: submenu }, {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id,
                });
            }  else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
                console.log(`Unhandled callback data: ${data}`);
            }
        }
    } catch (error) {
        console.log(error);
    }
});

bot.on('text', async msg => {
    try {
        const mainMenu = [
            [{ text: 'üõ°Ô∏è VPN', callback_data: 'submenu_vpn' }],
            [{ text: '‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç', callback_data: 'submenu_account' }],
            [{ text: 'üë• –û –Ω–∞—Å', callback_data: 'submenu_about' }],
            [{ text: '‚ÑπÔ∏è FAQ', callback_data: 'submenu_faq' }],
            [{ text: 'üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'submenu_support' }],
            [{ text: 'üí≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data: 'submenu_partnership' }, { text: 'üéôÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª', callback_data: 'submenu_channel' }],
        ];

        if (msg.text === '/start') {
            if (msg.text.length > 6) {
                const refID = msg.text.slice(7);
                await bot.sendMessage(msg.chat.id, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`);
            }
            await bot.sendPhoto(msg.chat.id, './Images/vpn.jpg', {
                caption: "",
                reply_markup: {
                    inline_keyboard: mainMenu
                }
            });
        } else if (msg.text === '/ref') {
            await bot.sendMessage(msg.chat.id, `${LINK}?start=${msg.from.id}`);
        } else {
            await bot.sendMessage(msg.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ /start');
        }
    } catch (error) {
        console.log(error);
    }
});
